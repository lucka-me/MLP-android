apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    def newVersionCode = getVersionCode()
    defaultConfig {
        applicationId "labs.lucka.mlp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode newVersionCode
        versionName "0.2.13"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // Anko
    implementation "org.jetbrains.anko:anko:$anko_version"
    // Gson
    implementation 'com.google.code.gson:gson:2.8.5'
}

def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        versionProps['VERSION_CODE'] = (++versionCode).toString()
        versionProps.store(versionFile.newWriter(), null)
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}